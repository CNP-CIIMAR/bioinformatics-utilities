{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c9127758-5bcc-4f11-86ba-9a64d06e83de",
   "metadata": {},
   "outputs": [],
   "source": [
    "####Neste exemplo, a tabela é fornecida como argumento de linha de comando, usando a biblioteca argparse. A tabela é lida em um DataFrame pandas e o script itera sobre cada linha da tabela, baixando o artigo correspondente, pesquisando substratos de enzimas no PDF e armazenando as informações em uma lista de resultados. Quando todos os artigos foram processados, o script imprime a lista de resultados em forma de tabela. Note que é preciso ter a biblioteca pandas instalada.\n",
    "#Neste exemplo, o DOI do artigo é definido como \"10.1038/nature18634\". O script usa a função \"get_article()\" para baixar o artigo e salvar o PDF. Em seguida, a função \"extract_text()\" é usada para extrair o texto do PDF e a função \"find_enzyme_substrate()\" é usada para pesquisar substratos de enzimas no texto. O resultado é impresso na tela. Note que é preciso ter as bibliotecas PyPubSub, PyPDF2 e BeautifulSoup instaladas."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b62c4fb5-58cc-4ea2-b507-fdd5b970bf57",
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "import requests\n",
    "import PyPDF2\n",
    "from bs4 import BeautifulSoup\n",
    "import argparse\n",
    "import pandas as pd\n",
    "\n",
    "# Define a função para baixar o artigo com DOI\n",
    "def get_article(doi):\n",
    "    url = \"https://doi.org/\" + doi\n",
    "    response = requests.get(url)\n",
    "    soup = BeautifulSoup(response.content, 'html.parser')\n",
    "    article_url = soup.find(\"meta\", {\"name\": \"citation_pdf_url\"})['content']\n",
    "    article_title = soup.find(\"meta\", {\"name\": \"citation_title\"})['content']\n",
    "    article_data = {\n",
    "        \"title\": article_title,\n",
    "        \"url\": article_url\n",
    "    }\n",
    "    return article_data\n",
    "\n",
    "# Define a função para extrair texto do PDF\n",
    "def extract_text(pdf_path):\n",
    "    with open(pdf_path, 'rb') as pdf_file:\n",
    "        pdf_reader = PyPDF2.PdfFileReader(pdf_file)\n",
    "        text = \"\"\n",
    "        for i in range(pdf_reader.getNumPages()):\n",
    "            page = pdf_reader.getPage(i)\n",
    "            text += page.extractText()\n",
    "        return text\n",
    "\n",
    "# Define a função para pesquisar substrato de uma enzima\n",
    "def find_enzyme_substrate(text, enzyme_suffix):\n",
    "    regex = r\"\\b\\w*\" + enzyme_suffix + r\"\\b\"\n",
    "    substrates = re.findall(regex, text)\n",
    "    return substrates\n",
    "\n",
    "# Define o argumento de linha de comando para o arquivo da tabela\n",
    "parser = argparse.ArgumentParser()\n",
    "parser.add_argument(\"table\", help=\"Arquivo da tabela com colunas DOI e Produto NATURAL\")\n",
    "args = parser.parse_args()\n",
    "\n",
    "# Lê a tabela em um DataFrame pandas\n",
    "table = pd.read_csv(args.table)\n",
    "\n",
    "# Cria uma lista para armazenar as informações encontradas\n",
    "results = []\n",
    "\n",
    "# Itera sobre cada linha da tabela\n",
    "for i, row in table.iterrows():\n",
    "    doi = row['DOI']\n",
    "    article_data = get_article(doi)\n",
    "    pdf_response = requests.get(article_data['url'])\n",
    "    pdf_file = open(article_data['title'] + \".pdf\", 'wb')\n",
    "    pdf_file.write(pdf_response.content)\n",
    "    pdf_file.close()\n",
    "    text = extract_text(article_data['title'] + \".pdf\")\n",
    "    substrates = find_enzyme_substrate(text, \"-ase\")\n",
    "    for substrate in substrates:\n",
    "        result = {\n",
    "            \"DOI\": doi,\n",
    "            \"Substrato\": substrate,\n",
    "            \"Produto NATURAL\": row['Produto NATURAL']\n",
    "        }\n",
    "        results.append(result)\n",
    "\n",
    "# Imprime a tabela de resultados\n",
    "if len(results) > 0:\n",
    "    results_df = pd.DataFrame(results)\n",
    "    print(results_df.to_string(index=False))\n",
    "else:\n",
    "    print(\"Nenhum substrato encontrado.\")\n",
    "    \n",
    "    "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
